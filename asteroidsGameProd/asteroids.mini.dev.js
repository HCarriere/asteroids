function init(){canvas=document.getElementsByTagName("canvas")[0],ctx=canvas.getContext("2d"),window.addEventListener("mousedown",mousePressed),window.addEventListener("mouseup",mouseReleased),window.addEventListener("mousemove",mouseDragged),window.addEventListener("keypress",keyPressed),window.onresize=resizeCanvas,width=canvas.width=window.innerWidth,height=canvas.height=window.innerHeight,resizeCanvas(),screenBuild.fetchScreen("home"),render()}function render(){ctx.clearRect(0,0,width,height),ctx.fillStyle="#fff";var e=fps.get();ctx.fillText("fps:"+Math.floor(e)+" ("+Math.floor(100*e/60)+"%)",1,10),output.show(1,20),drawMouses(),requestAnimationFrame(render)}function mousePressed(e){sockets.emit("mouse",null,e.offsetX)}function mouseReleased(e){}function mouseDragged(e){e.offsetX?(mouseX=e.offsetX,mouseY=e.offsetY):e.layerX&&(mouseX=e.layerX,mouseY=e.layerY),sockets.emit("mouseDragged",null,{x:mouseX,y:mouseY})}function keyPressed(e){sockets.emit("key",null,e.charCode)}function resizeCanvas(){width=canvas.width=window.innerWidth,setTimeout(function(){height=canvas.height=window.innerHeight},0)}function drawMouses(){for(var e=0;e<mouses.length;e++)ctx.fillStyle="#ff0000",ctx.fillRect(mouses[e].x,mouses[e].y,10,10)}function getEvents(){var e=[];return e.ckey={onReceive:function(e){output.write("ckey : "+e)}},e.cmouse={onReceive:function(e){output.write("cmouse : "+e)}},e.console={onReceive:function(e){output.write(e)}},e.mouseDragged={onReceive:function(e){mouses=e.mouses}},e}var canvas,ctx,mouseX,mouseY,mouses=[];$(document).ready(function(){sockets.init(getEvents()),init()});var fps={startTime:0,frameNumber:0,get:function(){this.frameNumber++;var e=(new Date).getTime(),t=(e-this.startTime)/1e3,n=this.frameNumber/t;return t>1&&(this.startTime=(new Date).getTime(),this.frameNumber=0),n}},output={history:[],write:function(e){this.history.push(e),this.history.length>40&&this.history.shift()},show:function(e,t){for(var n=0;n<this.history.length;n++)ctx.fillText(this.history[n],e,t+10*n)}},sockets={socket:null,init:function(e){this.socket=io(),this.socket.on("event",function(t){e[t.header].onReceive(t.data)}),this.socket.on("screenInfo",function(e,t){screenBuild.addScreen(e.header,e.data),t("OK")}),this.socket.on("disconnected",function(){output.write("disconnected from server")})},emit:function(e,t,n){this.socket.emit("event",{header:e,context:t,data:n})},fetchScreen:function(e){this.socket.emit("screenInfo",{data:e})}},screenBuild={loadedScreens:[],addScreen:function(e,t){output.write("screen <"+e+"> stored. ("+JSON.stringify(t)+")"),this.loadedScreens[e]=t},fetchScreen:function(e){this.isScreenLoaded&&sockets.fetchScreen(e)},isScreenLoaded:function(e){return!!this.loadedScreens[e]}};